{"mappings":"AAIA,MAAMA,EAAWC,SAASC,cAAc,SAGxC,IAAIC,EAAU,KAId,SAASC,EAAcC,EAAUC,GAEjC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCT,EAAUU,YAAW,KACfH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAZXN,EAASc,iBAAiB,UAiB1B,SAAkCC,GAChCA,EAAOC,iBAEP,MAAQV,MAAAW,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAOK,cAAcC,SACrD,IAAIC,EAAMC,OAAON,EAAMO,OAEvB,IAAK,IAAIC,EAAI,EAAGA,GAAKN,EAAOK,MAAOC,GAAI,EAEzCrB,EAAcqB,EAAGH,GACdI,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MAEfqB,QAAMC,IAAI,uBAAqBvB,QAAiBC,MAAU,IAE7DuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAEhBqB,QAAMC,IAAI,sBAAoBvB,QAAeC,MAAU,IAE3DgB,GAAOC,OAAOL,EAAKM,M","sources":["src/js/03-promises.js"],"sourcesContent":["// import { Notify } from 'notiflix';\n\n\n\nconst refsForm = document.querySelector('.form');\n// console.log(refsForm);\n\nlet timerId = null; \n\nrefsForm.addEventListener('submit', submitInPromiseGenerator);\n\nfunction createPromise(position, delay) {\n \nreturn new Promise((resolve, reject) => {\n  const shouldResolve = Math.random() > 0.3;\n  timerId = setTimeout(() => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  }, delay);\n});\n}  \n\n\nfunction submitInPromiseGenerator(params) {\n  params.preventDefault();\n\n  const { delay, step, amount } = params.currentTarget.elements;\n  let del = Number(delay.value);\n\n  for (let i = 0; i <= amount.value; i+= 1) {\n    \ncreatePromise(i, del)\n  .then(({ position, delay }) => {\n    // Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    // Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  del += Number(step.value);\n  }\n}\n\n"],"names":["$47d4ff9957288465$var$refsForm","document","querySelector","$47d4ff9957288465$var$timerId","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","params","preventDefault","delay1","step","amount","currentTarget","elements","del","Number","value","i","then","console","log","catch"],"version":3,"file":"03-promises.3eb4c9b5.js.map"}