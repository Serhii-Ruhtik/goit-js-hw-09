{"mappings":"AAAiBA,SAASC,cAAc,SAG7BC,iBAAiB,UAE1B,SAAkCC,GAChCC,QAAQC,IAAI,G,UAIQC,KAAKC,UAS1BC,MAAK,EAACC,SAAEA,EAAQC,MAAEA,MACjBN,QAAQC,IAAI,uBAAqBI,QAAiBC,MAAU,IAE7DC,OAAM,EAACF,SAAEA,EAAQC,MAAEA,MAClBN,QAAQC,IAAI,sBAAoBI,QAAiBC,MAAU,IAE/DN,QAAQC,IAAI","sources":["src/js/03-promises.js"],"sourcesContent":["const refsForm = document.querySelector(\".form\")\n  // console.log(refsForm);\n\n  refsForm.addEventListener('submit', submitInPromiseGenerator)\n\n  function submitInPromiseGenerator(params) {\n    console.log(10);\n  };\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\nconsole.log(10);\n\n// !---------------------------------------\n\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\n\n// const formField = document.querySelector('.form');\n// let timerId = null;\n// // let counter = 0;\n\n// formField.addEventListener('submit', submitHandler);\n\n// function submitHandler(event) {\n//   event.preventDefault();\n//   const {\n//     elements: { delay, step, amount },\n//   } = event.currentTarget;\n\n//   let del = Number(delay.value);\n\n//   for (let i = 1; i <= amount.value; i += 1) {\n//     createPromise(i, del)\n//       .then(({ position, delay }) => {\n//         Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n\n//     del += Number(step.value);\n//   }\n\n//   // while (counter < amount.value) {\n//   //   counter++;\n\n//   //   createPromise(counter, del)\n//   //     .then(({ position, delay }) => {\n//   //       Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   //     })\n//   //     .catch(({ position, delay }) => {\n//   //       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//   //     });\n\n//   //   del += Number(step.value);\n//   // }\n//   // counter = 0;\n//   event.currentTarget.reset();\n// }\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n\n//   return new Promise((resolve, reject) => {\n//     timerId = setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }"],"names":["document","querySelector","addEventListener","params","console","log","Math","random","then","position","delay","catch"],"version":3,"file":"03-promises.3c586ba5.js.map"}