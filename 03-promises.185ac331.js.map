{"mappings":"AAsFgB,IAAIA,SAAQ,CAACC,EAASC,KACpCA,EAAO,SAAS,IAEVC,MAAKC,GAASC,QAAQC,IAAIF,KAClCC,QAAQC,IAAI","sources":["src/js/03-promises.js"],"sourcesContent":["// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// !---------------------------------------\n// const promise = new Promise((resolve, reject) => {\n//   const canFulfill = Math.random() > 0.5;\n\n//   setTimeout(() => {\n//     if (canFulfill) {\n//       resolve('YES');\n//     }\n//     reject('NO');\n//   }, 2000);\n// });\n\n// function onFulfilled(result) {\n//   console.log('onFulfilled -> onFulfilled');\n//   console.log(`✅ ${result}`);\n// }\n\n// function onRejected(error) {\n//   console.log('onRejected -> onRejected');\n//   console.log(`❌ ${error}`);\n// }\n\n// /**\n//  * ланцюжки промісів\n//  */\n\n// promise\n//   .then(onFulfilled, onRejected)\n//   .then(x => {\n//     console.log(x);\n\n//     return 10;\n//   })\n//   .then(y => console.log(y))\n//   .then(a => console.log(a))\n//   .catch(error => console.log(error))\n//   .finally(() => console.log('Я буду виконуватися завжди'));\n\n/*\n * Промисификация:\n * - Поблема доступа к результату промиса с колбеком\n * - Функция которая возвращает промис\n */\n\n// const makeOrder = (dish) => {\n//   const DELAY = 1000;\n\n//   const promise = new Promise((resolve, reject) =>\n//   {\n//     const passed = Math.random() > 0.5;\n//   setTimeout(() => {\n//     if (passed) {\n//       resolve('Your food');\n//     } else {\n//       reject('your food is not ready');\n//     }\n//   }, DELAY);\n//   })\n//   return promise\n// };\n\n// makeOrder('пиріжок').then(onMakeOrderSuccess).catch(onMakeOrderError) ;\n\n// function onMakeOrderSuccess(result) {\n//   console.log('onMakeOrderSuccess');\n//   console.log(result);\n// }\n// function onMakeOrderError(error) {\n//   console.log('onMakeOrderError');\n//   console.log(error);\n// }\n// console.log(10);\n// console.log(20);\n// console.log(30);\n// console.log(40);\n// console.log(50);\n\nconst promise = new Promise((resolve, reject) => {\n  reject(\"Whoops\")\n})\npromise.then(value => console.log(value));\nconsole.log(10);"],"names":["Promise","resolve","reject","then","value","console","log"],"version":3,"file":"03-promises.185ac331.js.map"}